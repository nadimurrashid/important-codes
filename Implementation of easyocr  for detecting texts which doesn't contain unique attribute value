def new_image_text(step_data_set):
    sModuleInfo =x
    try:
        from Framework import easyocr
        import cv2
        from pytesseract import pytesseract
        from difflib import SequenceMatcher

        pytesseract.tesseract_cmd = os.environ["PROGRAMFILES"] + r"\Tesseract-OCR\tesseract.exe"

        idx = 0
        image_text = ""
        language = ""
        t_conf = 0.9
        text_screenshot = ''
        easyocr_paragraph = ''
        previous_stored_data = None
        store_data = ''

        for left, mid, right in step_data_set:
            left = left.strip().lower()
            mid = mid.strip().lower()
            if mid == "element parameter":
                if "index" in left:
                    idx = int(right.strip())
                elif "easytxt" in left:
                    image_text = right
                elif 'language' in left:
                    language = right
                elif 't_conf' in left:
                    t_conf = float(right)
                elif 't_screenshot' in left:
                    text_screenshot = right
                elif 'easyocr_paragraph' in left:
                    easyocr_paragraph = right
                elif "store_data" in left:
                    store_data = right.strip()
                elif 'previous_value' in left:
                    previous_stored_data = CommonUtil.parse_value_into_object(right.strip())

        if language == '':
            language = 'en'
        PIL.ImageGrab.grab().save("sample.png")
        if previous_stored_data == None:
            if easyocr_paragraph == 'true':
                reader = easyocr.Reader([language])
                output = reader.readtext("sample.png", paragraph=True)
                Shared_Resources.Set_Shared_Variables(store_data, output)
            else:
                reader = easyocr.Reader([language])
                output = reader.readtext("sample.png", paragraph=False)
                Shared_Resources.Set_Shared_Variables(store_data, output)
        else:
            output = previous_stored_data


        item = []
        count = 0
        for text in output:
            def seq(a, b):
                c = SequenceMatcher(a=a, b=b).ratio()
                print(c)
                if c > 0.8:
                    return c
                else:
                    return .00004

            rslt = seq(image_text, text[1])
            if rslt >= float(t_conf):
                # if image_text in text[1]:
                item.append([text])
                print(text)
                CommonUtil.ExecLog(sModuleInfo, "Found %s text. Returning element of index %s" % (image_text, count), 1)
                count = count + 1
            else:
                print(text)
                continue

        if item == []:
            CommonUtil.ExecLog(sModuleInfo, 'Could not find text "%s"' % image_text, 3)
            return "zeuz_failed"

        cords = item[idx][0][0]
        x_min, y_min = cords[0][0], cords[0][1]
        x_max, y_max = cords[2][0], cords[2][1]

        if text_screenshot != '':
            img = cv2.imread("sample.png")
            cropping = img[y_min:y_max, x_min:x_max]
            cv2.imwrite('cropped_image.png', cropping)
            from PIL import Image

            image = Image.open('cropped_image.png')
            gray_image = image.convert('L')
            output_2 = pytesseract.image_to_string(gray_image)
            print(output_2)

            if output_2 in image_text or image_text in output_2:
                element = x_min, y_min, x_max - x_min, y_max - y_min
                return _Element(element)
            else:
                CommonUtil.ExecLog(sModuleInfo, 'Could not find text "%s"' % image_text, 3)
                return "zeuz_failed"
        else:
            element = x_min, y_min, x_max - x_min, y_max - y_min
            return _Element(element)
    except:
        return CommonUtil.Exception_Handler(sys.exc_info())
